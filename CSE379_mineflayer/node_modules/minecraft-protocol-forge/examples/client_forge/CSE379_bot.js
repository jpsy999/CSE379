/**
 * mc is part of the base mineflayer library, needed to create the bot
 * forgehandshake and autoversionforge are part of the forge mineflayer addon library
 * that allows mineflayer to also connect to forge modified servers. autoVersion forge
 * will automatically detect and install any and all client side modifcations needed to 
 * allow my bot to connect.
 * mineflayer and chat give access to additional mineflayer commands
 * 
 * Please note that you will have to edit the path to certain files that were not
 * auto-detected on my machine such as chat.
 */
var mc = require('minecraft-protocol');
var fs  = require("fs");
var forgeHandshake = require('../../src/client/forgeHandshake');
var autoVersionForge = require('../../src/client/autoVersionForge');
const Vec3 = require('vec3').Vec3
const mineflayer = require('mineflayer')
const chat = require('c:/Users/Marij/Desktop/CSE379_mineflayer/node_modules/mineflayer/lib/plugins/chat.js');

/**
 * expects 5 args to run this file. PLEASE NOTE: if done similiar to my project,
 * you can input only 3 commands. The name is already specified below as WeatherBot and
 * a password is not needed. If the server is not set up to ignore authentification, the bot
 * would need its own minecraft account.
 */
if(process.argv.length < 4 || process.argv.length > 6) {
  console.log("Usage : node CSE379_bot.js <host> <port> [<name>] [<password>]");
  process.exit(1);
}

var host = process.argv[2];
var port = parseInt(process.argv[3]);
/**
 * note: it is important that the name of the bot here is PreSet and constant. A
 * minecraft server see each new minecraft name as its own unique ID, therefore changing
 * the name associated with your account (which is normally not possible) will make you
 * a fresh entity on the server and therefore remove things such as admin priveldges
 * 
 * NOTE: the first time this code is successfully run, you will have to do a 1 time 
 * manual grant of admin permission to the entity "WeatherBot" via server console or
 * ingame player who is OPed or Admined
 */
var username =  process.argv[4] ? process.argv[4] : "WeatherBot";
var password = process.argv[5];

/**
 * this is the cleaned up version of code that actually creates the bot and makes it
 * join the server.
 */
  var client = mc.createClient({
    version: false,
    host: host,
    port: port,
    username: username,
    password: password
  });

  /**
   * before the client joins, autodetect and add neccessary plugins/mods
   */
  autoVersionForge(client);

const readline = require('readline'); //reads lines...
const chats = [];
var child_process = require('child_process'); //see later
var wc;

/**
 * allows to process information from STDIN
 */
const rl = readline.createInterface({
  input:  process.stdin,
  output: process.stdout 
});

/**
 * code breakdown: on the read of a 'line' perform the code associated with the input,
 * aka kill the process or write to game
 */
rl.on('line', function(line) {
  if(line === '') {
    return;
  } else if(line === '/quit') {
    console.info('Disconnected from ' + host + ':' + port);
    client.end();
    return;
  } else if(line === '/end') {
    console.info('Forcibly ended client');
    process.exit(0);
    return;
  }
  if(!client.write('chat', {message: line})) {
    chats.push("/" + line);
  }
});

/**
 * every X seconds after the initial output, split the next line from a file and send it
 * to console.log and STDIN. Child process appears to be the only way to send to STDIN
 * in node.js. Had much trouble with sending to STDIN and sometimes had issues. For future
 * use or future modification I would suggest finding a better alternative way to do this
 * that is more stable.
 */
var interval = 10 * 1000; // 10 second;
var lines = fs.readFileSync('./weather.txt').toString().split('\n');
for(var line = 0; line < lines.length; line++){
  setTimeout( function (line) {
    console.log(lines[line]);
  wc = child_process.spawn('wc');
  wc.stdin.write(lines[line]);
  //console.log(wc.stdin.write(lines[line]).toString());
  wc.stdin.end();
}, interval * line, line);
}